"""data_operation

Revision ID: b4b374eb4b81
Revises: ddc1c049a9f7
Create Date: 2020-12-22 07:42:13.552486

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b4b374eb4b81'
down_revision = 'ddc1c049a9f7'
branch_labels = None
depends_on = None

def insert_statuses():
    from models.dao.common.Status import Status
    bind = op.get_bind()
    from sqlalchemy import orm
    session = orm.Session(bind=bind)
    status_list = [
        {
            "Id":1,
            "Name": "Initialized",
            "Description": "Initialized",
        },
        {
            "Id":2,
            "Name": "Start",
            "Description": "Start",
        },
        {
            "Id":3,
            "Name": "Finish",
            "Description": "Finish",
        },
        {
            "Id":4,
            "Name": "Error",
            "Description": "Error",
        },
    ]
    statuses = []
    for status_json in status_list:
        status = Status(
            Name=status_json["Name"],
            Description=status_json["Description"]
        )
        statuses.append(status)
    session.bulk_save_objects(statuses)
    session.commit()

def insert_event_datas():
    from models.enums.events import EVENT_EXECUTION_INITIALIZED,EVENT_EXECUTION_FINISHED, EVENT_EXECUTION_STARTED
    from models.dao.common.OperationEvent import OperationEvent
    bind = op.get_bind()
    from sqlalchemy import orm
    session = orm.Session(bind=bind)
    events_list = [
        {
            "Code": EVENT_EXECUTION_INITIALIZED,
            "Name": "EVENT_EXECUTION_INITIALIZED",
            "Description": "Execution initialized",
            "Class": "DataOperationJobExecution"
        },
        {
            "Code": EVENT_EXECUTION_STARTED,
            "Name": "EVENT_EXECUTION_STARTED",
            "Description": "Execution was started",
            "Class": "DataOperationJobExecution"
        },
        {
            "Code": EVENT_EXECUTION_FINISHED,
            "Name": "EVENT_EXECUTION_FINISHED",
            "Description": "Execution was started",
            "Class": "DataOperationJobExecution"
        }
    ]
    events = []
    for eventJson in events_list:
        event = OperationEvent(Code=eventJson["Code"], Name=eventJson["Name"], Description=eventJson["Description"],
                                 Class=eventJson["Class"])

        events.append(event)
    session.bulk_save_objects(events)
    session.commit()

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE SCHEMA "Operation"')
    op.create_table('OperationEvent',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('Code', sa.Integer(), nullable=False),
    sa.Column('Name', sa.String(length=100), nullable=False),
    sa.Column('Description', sa.String(length=250), nullable=False),
    sa.Column('Class', sa.String(length=255), nullable=False),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('Id'),
    sa.UniqueConstraint('Code'),
    schema='Common'
    )
    op.create_table('Status',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('Name', sa.String(length=100), nullable=False),
    sa.Column('Description', sa.String(length=250), nullable=False),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('Id'),
    schema='Common'
    )
    op.create_table('DataOperation',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('Name', sa.String(length=100), nullable=False),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('Id'),
    schema='Operation'
    )
    op.create_table('DataOperationIntegration',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('DataOperationId', sa.Integer(), nullable=True),
    sa.Column('DataIntegrationId', sa.Integer(), nullable=True),
    sa.Column('Order', sa.Integer(), nullable=False),
    sa.Column('Limit', sa.Integer(), nullable=False),
    sa.Column('ProcessCount', sa.Integer(), nullable=False),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['DataOperationId'], ['Operation.DataOperation.Id'], ),
    sa.ForeignKeyConstraint(['DataIntegrationId'], ['Integration.DataIntegration.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    schema='Operation'
    )
    op.create_table('DataOperationJob',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('DataOperationId', sa.Integer(), nullable=True),
    sa.Column('ApSchedulerJobId', sa.Integer(), nullable=True),
    sa.Column('StartDate', sa.DateTime(), nullable=False),
    sa.Column('EndDate', sa.DateTime(), nullable=True),
    sa.Column('Cron', sa.String(length=100), nullable=True),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['ApSchedulerJobId'], ['Aps.ApSchedulerJob.Id'], ),
    sa.ForeignKeyConstraint(['DataOperationId'], ['Operation.DataOperation.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    schema='Operation'
    )
    op.create_table('DataOperationJobExecution',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('DataOperationJobId', sa.Integer(), nullable=True),
    sa.Column('StatusId', sa.Integer(), nullable=True),
    sa.Column('StartDate', sa.DateTime(), nullable=False),
    sa.Column('EndDate', sa.DateTime(), nullable=True),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['DataOperationJobId'], ['Operation.DataOperationJob.Id'], ),
    sa.ForeignKeyConstraint(['StatusId'], ['Common.Status.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    schema='Operation'
    )
    op.create_table('DataOperationJobExecutionEvent',
    sa.Column('Id', sa.Integer(), nullable=False),
    sa.Column('DataOperationJobExecutionId', sa.Integer(), nullable=True),
    sa.Column('EventId', sa.Integer(), nullable=True),
    sa.Column('EventDate', sa.DateTime(), nullable=False),
    sa.Column('CreatedByUserId', sa.Integer(), nullable=False),
    sa.Column('CreationDate', sa.DateTime(), nullable=False),
    sa.Column('LastUpdatedUserId', sa.Integer(), nullable=True),
    sa.Column('LastUpdatedDate', sa.DateTime(), nullable=True),
    sa.Column('IsDeleted', sa.Integer(), nullable=False),
    sa.Column('Comments', sa.String(length=1000), nullable=True),
    sa.Column('RowVersion', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['DataOperationJobExecutionId'], ['Operation.DataOperationJobExecution.Id'], ),
    sa.ForeignKeyConstraint(['EventId'], ['Common.OperationEvent.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    schema='Operation'
    )
    insert_statuses()
    insert_event_datas()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('DataOperationJobExecutionEvent', schema='Operation')
    op.drop_table('DataOperationJobExecution', schema='Operation')
    op.drop_table('DataOperationJob', schema='Operation')
    op.drop_table('DataOperationIntegration', schema='Operation')
    op.drop_table('DataOperation', schema='Operation')
    op.drop_table('Status', schema='Common')
    op.drop_table('OperationEvent', schema='Common')
    # ### end Alembic commands ###
    op.execute('DROP SCHEMA "Operation"')
